# You will need to run these lines if the packages aren't already installed
#install.packages("DBI")
#install.packages("RSQLite")
#install.packages("rstudioapi")
#install.packages("tidyverse")
install.packages("readxl")
library(DBI)
library(RSQLite)
library(rstudioapi)
library(tidyverse)
library(readxl)
connect = function() {
# Sets the working directory to location of R script
currentDir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(currentDir)
# Checks if connection is possible
if (dbCanConnect(RSQLite::SQLite(), "SMATDB.db")) {
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
print("Connection established.")
return(db)
} else {
print("Database failed to connect.")
stop()
}
}
seeMenu = function(db) {
choice = 1;
print("///// Stock Market Analysis Tool /////")
while (choice != 0) {
print("[1] See line graph of a company's change in share price")
print("[2] See histogram of the highest/lowest 3 share prices")
choice = readline("Select an action (0 to exit): ")
result = switch(
choice,
"1" = showShareLGraph(db),
"2" = createHistogram(db)
)
}
}
# Shows a line graph of a company's share price over the past month
showShareLGraph = function(db) {
query = "SELECT COMP_ID, COMP_NAME FROM COMPANY ORDER BY COMP_NAME ASC;"
companies = dbGetQuery(db, query)
print(companies[c("COMP_NAME", "COMP_ID")])
# Checking if the ID selected is valid
repeat {
company = readline("Select a company by COMP_ID: ")
query2 = paste("SELECT SHARE_DATE AS DATE, SHARE_PRICE AS PRICE FROM SHARE WHERE COMP_ID = ", company, " ORDER BY SHARE_DATE;")
shares = dbGetQuery(db, query2)
# If rows exist, the COMP_ID is valid; otherwise, loop continues
if (nrow(shares) != 0) {
break
}
print("This is not a valid COMP_ID.")
}
graph = ggplot(data = shares, aes(x = DATE, y = PRICE, group = 1)) + geom_line()
print(graph)
}
createHistogram = function(db){
# Asks for user input
choice = readline("Select 1 to view the highest 3 shares and 2 to view the lowest 3 shares:  ")
#Calculates highest shares
if (choice == "1") {
query1 <- "SELECT X.COMP_ID, X.SHARE_PRICE
FROM SHARE X
GROUP BY X.COMP_ID
ORDER BY X.SHARE_PRICE DESC
LIMIT 3"
shares <- dbGetQuery(db, query1)
print(shares)
}
#Calculates lowest shares
if (choice == "2") {
query2 <- "SELECT X.COMP_ID, X.SHARE_PRICE
FROM SHARE X
GROUP BY X.COMP_ID
ORDER BY X.SHARE_PRICE ASC
LIMIT 3"
shares <- dbGetQuery(db, query2)
}
#Creates graph based on the selected shares
mygraph = ggplot(data = shares, aes(x = COMP_ID, y = SHARE_PRICE)) + geom_bar(stat = "identity") +
labs(title = "Share Prices", x = "Company ID", y = "Share Price")
print(mygraph)
}
db = connect()
seeMenu(db)
library(DBI)
library(RSQLite)
library(rstudioapi)
library(tidyverse)
library(readxl)
data = read_excel("constituents-financials_csv.csv")
library(DBI)
library(RSQLite)
library(rstudioapi)
library(tidyverse)
library(readxl)
data = read_excel("constituents-financials_csv.xlsx")
library(DBI)
library(RSQLite)
library(rstudioapi)
library(tidyverse)
library(readxl)
data = read_excel("constituents-financials_csv.csv")
install.packages("readr")
library(DBI)
library(RSQLite)
library(rstudioapi)
library(tidyverse)
library(readxl)
library(readr)
data = read_csv("constituents-financials_csv.csv")
library(DBI)
library(RSQLite)
library(rstudioapi)
library(tidyverse)
library(readxl)
library(readr)
data = read_csv("constituents-financials_csv.csv")
