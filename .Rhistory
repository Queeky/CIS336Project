db = dbConnect(RMySQL::MySQL(), user = "root", password = "", dbname = "SMATDB")
con = dbConnect(RMySQL::MySQL(), user = "root", password = "", dbname = "SMATDB")
install(RMySQL)
install.packages(RMySQL)
install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
install.packages("DBI")
install.packages("DBI")
#install.packages("DBI")
library(RMySQL)
library(RMySQL)
test = dbGetQuery(db, "SELECT * FROM MARKET;")
db = dbConnect(RMySQL::MySQL(), user = "root", password = "", dbname = "SMATDB")
db = dbConnect(dbDriver("SQLite"), dbname = "SMATDB.db")
#test = dbGetQuery(db, "SELECT * FROM MARKET;")
#test = dbGetQuery(db, "SELECT * FROM MARKET;")
db = dbConnect(SQLite(), dbname = "SMATDB.db")
library(RSQLite)
install.packages("RSQLite")
library(DBI)
db = dbConnect(SQLite(), dbname = "SMATDB.db")
library(DBI)
library(RSQLite)
# Sets the working directory
oldDir = getwd()
print(oldDir)
library(DBI)
library(RSQLite)
# Sets the working directory
oldDir = getwd()
print(oldDir)
library(DBI)
library(RSQLite)
# Sets the working directory
oldDir = dirname(rstudioapi::getSourceEditorContext()$path)
print(oldDir)
# Sets the working directory to location of R script
currentDir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(currentDir)
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
library(DBI)
library(RSQLite)
# Sets the working directory to location of R script
currentDir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(currentDir)
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
# Sets the working directory to location of R script
currentDir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(currentDir)
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
if (!db) {
print("Database failed to connect.")
} else {
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
}
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
if (!(db)) {
print("Database failed to connect.")
} else {
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
}
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
if (db) {
print("Database failed to connect.")
} else {
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
}
if (!db) {
print("Database failed to connect.")
} else {
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
}
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
print(db)
View(db)
db = dbConnect(RSQLite::SQLite(), "SMATDB.dbe")
print(db)
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
if (db = dbConnect(RSQLite::SQLite(), "SMATDB.db")) {
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
if (!dbCanConnect(db)) {
print("Database failed to connect.")
} else {
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
}
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
if (!dbCanConnect(RSQLite::SQLite(), "SMATDB.db")) {
print("Database failed to connect.")
} else {
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
}
# Sets the working directory to location of R script
currentDir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(currentDir)
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
if (!dbCanConnect(RSQLite::SQLite(), "SMATDB.db")) {
print("Database failed to connect.")
} else {
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
}
# Sets the working directory to location of R script
currentDir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(currentDir)
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
if (dbCanConnect(RSQLite::SQLite(), "SMATDB.db")) {
print("Database failed to connect.")
} else {
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
}
# Sets the working directory to location of R script
currentDir = dirname(rstudioapi::getSourceEditorContext()$path)
setwd(currentDir)
if (!dbCanConnect(RSQLite::SQLite(), "SMATDB.db")) {
print("Database failed to connect.")
} else {
db = dbConnect(RSQLite::SQLite(), "SMATDB.db")
as.data.frame(dbListTables(db))
test = dbGetQuery(db, "SELECT * FROM MARKET;")
print(test)
}
